AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  GleamOrb Lambda Application
  
  SAM Template for Lambda functions to handle email destination management

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: java17
    Architectures:
      - x86_64
    Environment:
      Variables:
        DB_URL: !Sub 'jdbc:postgresql://${DBHost}:${DBPort}/${DBName}'
        DB_USER: !Ref DBUser
        DB_PASSWORD: !Ref DBPassword
        COGNITO_USER_POOL_ID: !Ref CognitoUserPool
        COGNITO_APP_CLIENT_ID: !Ref CognitoUserPoolClient
        COGNITO_APP_CLIENT_SECRET: !Ref GoogleClientSecret
        COGNITO_REGION: !Ref AWS::Region
        COGNITO_DOMAIN_NAME: nais
        APP_REDIRECT_URL: http://localhost:5173/auth/google/callback
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  DBHost:
    Type: String
    Description: RDS Host name
    Default: host.docker.internal
  DBPort:
    Type: String
    Description: RDS Port
    Default: "5432"
  DBName:
    Type: String
  GoogleClientSecret:
    Type: String
    Description: Google OAuth Client Secret
    NoEcho: true
    Description: Database name
    Default: gleamorb_db
  DBUser:
    Type: String
    Description: Database username
    Default: postgres
  DBPassword:
    Type: String
    Description: Database password
    NoEcho: true
    Default: password
  Stage:
    Type: String
    Description: Deployment stage
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
  GoogleClientId:
    Type: String
    Description: Google Client ID
    Default: ''
  GoogleClientSecret:
    Type: String
    Description: Google Client Secret
    NoEcho: true
    Default: ''

Resources:
  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub GleamOrb-UserPool-${Stage}
      # WARNING: UsernameAttributes is an immutable property and cannot be changed after creation
      # You must use email addresses as usernames with this configuration
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: false
      # We'll store original username in the user attributes through the code
      # Custom attributes will be managed through API calls directly
      
  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub GleamOrb-App-Client-${Stage}
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED
      # Add OAuth configurations
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:5173/auth/google/callback  # For local development
      LogoutURLs:
        - http://localhost:5173  # For local development
      SupportedIdentityProviders:
        - COGNITO
        - Google
      
  # Cognito Authorizer - commented out for local testing
  # Uncomment for deployment to AWS
  # CognitoAuthorizer:
  #   Type: AWS::ApiGateway::Authorizer
  #   Properties:
  #     Name: CognitoUserPoolAuthorizer
  #     IdentitySource: method.request.header.Authorization
  #     RestApiId: !Ref ServerlessRestApi
  #     Type: COGNITO_USER_POOLS
  #     ProviderARNs:
  #       - !GetAtt CognitoUserPool.Arn

  # Auth Lambda Function
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.gleamorb.lambda.handlers.AuthHandler::handleRequest
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminConfirmSignUp
                - cognito-idp:AdminGetUser
                - cognito-idp:SignUp
                - cognito-idp:InitiateAuth
              Resource: !GetAtt CognitoUserPool.Arn
      Events:
        SignupAPI:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: post
        LoginAPI:
          Type: Api
          Properties:
            Path: /auth/login
            Method: post
        MockTokenAPI:
          Type: Api
          Properties:
            Path: /auth/mock-token
            Method: get
            Auth:
              AuthorizationType: NONE
        GoogleAuthAPI:
          Type: Api
          Properties:
            Path: /auth/google
            Method: get
            Auth:
              AuthorizationType: NONE
        GoogleCallbackAPI:
          Type: Api
          Properties:
            Path: /auth/google/callback
            Method: get
            Auth:
              AuthorizationType: NONE
      Tags:
        Application: GleamOrb
        Environment: !Ref Stage

  ApiGatewayFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: com.gleamorb.lambda.handlers.ApiGatewayHandler::handleRequest
      Policies:
        - AWSLambdaBasicExecutionRole
        - VPCAccessPolicy: {}
      Events:
        RegisterEmailDestination:
          Type: Api
          Properties:
            Path: /api/email-destinations/register
            Method: post
            Auth:
              AuthorizationType: NONE
        EditEmailDestination:
          Type: Api
          Properties:
            Path: /api/email-destinations/edit/{id}
            Method: put
            Auth:
              AuthorizationType: NONE
        DeleteEmailDestination:
          Type: Api
          Properties:
            Path: /api/email-destinations/delete/{id}
            Method: delete
            Auth:
              AuthorizationType: NONE
        ListEmailDestination:
          Type: Api
          Properties:
            Path: /api/email-destinations/list
            Method: get
            Auth:
              AuthorizationType: NONE
      Tags:
        Application: GleamOrb
        Environment: !Ref Stage

Outputs:
  ApiGatewayFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt ApiGatewayFunction.Arn
  ApiGatewayFunctionRole:
    Description: "Implicit IAM Role created for the Lambda function"
    Value: !GetAtt ApiGatewayFunctionRole.Arn
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/api/"
  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref CognitoUserPoolClient
  AuthEndpoint:
    Description: "Auth API endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/auth/"
